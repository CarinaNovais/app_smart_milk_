import json
import paho.mqtt.client as mqtt
import time

class MQTTService:
    def __init__(self, usuario="csilab", senha="WhoAmI#2023"):
        self.broker = '192.168.66.50'
        self.port = 1883
        self.client_id = 'python_client'
        self.topic_login = 'topico/login'
        
        self.client = mqtt.Client(self.client_id)

        # Se seu broker usa autentica√ß√£o, passe aqui usu√°rio e senha
        if usuario and senha:
            self.client.username_pw_set(usuario, senha)
        
        # Callbacks
        self.client.on_connect = self._on_connected
        self.client.on_disconnect = self._on_disconnected
        self.client.on_subscribe = self._on_subscribed
        
        self.connected = False

    def conectar_mqtt(self):
        try:
            self.client.connect(self.broker, self.port)
            self.client.loop_start()
        except Exception as e:
            print(f'‚ö†Ô∏è Exce√ß√£o ao tentar conectar: {e}')

    def inscrever_no_login(self):
        if self.connected:
            self.client.subscribe(self.topic_login, qos=0)
            print(f'üì° Inscrito no t√≥pico "{self.topic_login}"')
        else:
            print('‚ùå N√£o est√° conectado. N√£o pode se inscrever.')

    def testar_publicacao(self, nome, senha, id_cargo):
        if self.connected:
            mensagem = json.dumps({
                'tipo': 'login',
                'usuario': nome,
                'senha': senha,
                'idCargo': id_cargo,
            })
            self.client.publish(self.topic_login, mensagem, qos=0)
            print(f'üì§ Mensagem publicada em "{self.topic_login}": {mensagem}')
        else:
            print('‚ùå Cliente MQTT N√ÉO est√° conectado. N√£o foi poss√≠vel publicar login.')

    # Callbacks
    def _on_connected(self, client, userdata, flags, rc):
        if rc == 0:
            self.connected = True
            print('üîå Conex√£o estabelecida com sucesso')
            self.inscrever_no_login()
        else:
            print(f'‚ùå Falha na conex√£o, c√≥digo {rc}')
            # Opcional: tentar reconectar ap√≥s um tempo
            # time.sleep(5)
            # self.conectar_mqtt()

    def _on_disconnected(self, client, userdata, rc):
        self.connected = False
        print('üîå Desconectado do broker')
        if rc != 0:
            print(f'Reconectando devido a desconex√£o inesperada (rc={rc})...')
            try:
                self.client.reconnect()
            except Exception as e:
                print(f'‚ö†Ô∏è Falha ao tentar reconectar: {e}')

    def _on_subscribed(self, client, userdata, mid, granted_qos):
        print('üì° Inscri√ß√£o confirmada no t√≥pico')

if __name__ == '__main__':
    # Se seu broker precisa de usu√°rio e senha, passe aqui
    mqtt_service = MQTTService(usuario='csilab', senha='WhoAmI#2023')
    mqtt_service.conectar_mqtt()

    # Aguarda conex√£o
    time.sleep(3)

    #simula√ß√£o de inscricao
    #mqtt_service.testar_publicacao('carina', '222', 5)

    # Mant√©m o script rodando para callbacks
    time.sleep(5)
    mqtt_service.client.loop_stop()
    mqtt_service.client.disconnect()
